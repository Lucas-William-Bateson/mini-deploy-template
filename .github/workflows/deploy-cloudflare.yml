name: Deploy to Cloudflare Tunnel

on:
  push:
    branches: [main]

env:
  CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
  ZONE_ID: ${{ secrets.ZONE_ID }}
  TUNNEL_ID: ${{ secrets.TUNNEL_ID }}
  ACCOUNT_ID: ${{ secrets.ACCOUNT_ID }}
  DOCKER_HOST: ${{ secrets.DOCKER_HOST }}
  APP_PORT: ${{ vars.APP_PORT || '3000' }}
  DOMAIN: ${{ vars.DOMAIN }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Generate project subdomain
        id: domain
        run: |
          PROJECT_NAME=$(echo ${{ github.repository }} | cut -d'/' -f2)
          SUBDOMAIN="${PROJECT_NAME}"
          DOMAIN="${{ env.DOMAIN }}"
          FQDN="${SUBDOMAIN}.${DOMAIN}"
          echo "subdomain=${SUBDOMAIN}" >> $GITHUB_OUTPUT
          echo "fqdn=${FQDN}" >> $GITHUB_OUTPUT
          echo "project=${PROJECT_NAME}" >> $GITHUB_OUTPUT
      
      - name: Validate environment
        run: |
          echo "Checking required variables..."
          
          if [ -z "$CLOUDFLARE_API_TOKEN" ]; then echo "‚ùå CLOUDFLARE_API_TOKEN missing"; exit 1; fi
          if [ -z "$ZONE_ID" ]; then echo "‚ùå ZONE_ID missing"; exit 1; fi
          if [ -z "$TUNNEL_ID" ]; then echo "‚ùå TUNNEL_ID missing"; exit 1; fi
          if [ -z "$ACCOUNT_ID" ]; then echo "‚ùå ACCOUNT_ID missing"; exit 1; fi
          if [ -z "$DOCKER_HOST" ]; then echo "‚ùå DOCKER_HOST missing"; exit 1; fi
          if [ -z "$APP_PORT" ]; then echo "‚ùå APP_PORT missing"; exit 1; fi
          
          echo "‚úÖ All variables present"
          echo "- Account ID: ${ACCOUNT_ID:0:8}..."
          echo "- Tunnel ID: ${TUNNEL_ID:0:8}..."
          echo "- Zone ID: ${ZONE_ID:0:8}..."
          echo "- FQDN: ${{ steps.domain.outputs.fqdn }}"
          echo "- Service: http://$DOCKER_HOST:$APP_PORT"
      
      - name: Test API access
        run: |
          echo "Testing Cloudflare API access..."
          
          # Test token validity
          TOKEN_TEST=$(curl -s -X GET \
            "https://api.cloudflare.com/client/v4/user/tokens/verify" \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN")
          
          TOKEN_VALID=$(echo "$TOKEN_TEST" | jq -r '.success')
          if [ "$TOKEN_VALID" != "true" ]; then
            echo "‚ùå Invalid API token"
            echo "$TOKEN_TEST" | jq '.errors[]'
            exit 1
          fi
          
          echo "‚úÖ API token valid"
          
          # Test tunnel access
          TUNNEL_TEST=$(curl -s -X GET \
            "https://api.cloudflare.com/client/v4/accounts/$ACCOUNT_ID/cfd_tunnel/$TUNNEL_ID" \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN")
          
          TUNNEL_VALID=$(echo "$TUNNEL_TEST" | jq -r '.success')
          if [ "$TUNNEL_VALID" != "true" ]; then
            echo "‚ùå Cannot access tunnel"
            echo "$TUNNEL_TEST" | jq '.errors[]'
            exit 1
          fi
          
          echo "‚úÖ Tunnel access confirmed"
          echo "Tunnel name: $(echo "$TUNNEL_TEST" | jq -r '.result.name')"
      
      - name: Update tunnel configuration
        run: |
          FQDN="${{ steps.domain.outputs.fqdn }}"
          SERVICE="http://$DOCKER_HOST:$APP_PORT"
          
          echo "Updating tunnel configuration for: $FQDN ‚Üí $SERVICE"
          
          # Get current configuration
          CURRENT_CONFIG=$(curl -s -X GET \
            "https://api.cloudflare.com/client/v4/accounts/$ACCOUNT_ID/cfd_tunnel/$TUNNEL_ID/configurations" \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN")
          
          echo "Current config response:"
          echo "$CURRENT_CONFIG" | jq '.'
          
          CONFIG_SUCCESS=$(echo "$CURRENT_CONFIG" | jq -r '.success')
          if [ "$CONFIG_SUCCESS" != "true" ]; then
            echo "‚ùå Failed to get tunnel configuration"
            echo "$CURRENT_CONFIG" | jq '.errors[]'
            exit 1
          fi
          
          # Extract current config and create updated version
          echo "$CURRENT_CONFIG" | jq -r '.result.config' > current_config.json
          
          # Create new config with updated ingress rules
          jq --arg hostname "$FQDN" --arg service "$SERVICE" '
            # Remove existing rule for this hostname
            .ingress = (.ingress | map(select(.hostname != $hostname))) |
            # Find catch-all rule index (rules without hostname or with http_status)
            (.ingress | map(.hostname == null or (.service | test("http_status:"))) | index(true)) as $catchall_idx |
            # Insert new rule before catch-all
            if $catchall_idx then
              .ingress = (.ingress[:$catchall_idx] + [{"hostname": $hostname, "service": $service}] + .ingress[$catchall_idx:])
            else
              .ingress = .ingress + [{"hostname": $hostname, "service": $service}]
            end
          ' current_config.json > new_config.json
          
          echo "New configuration:"
          cat new_config.json | jq '.'
          
          # Update tunnel configuration
          UPDATE_RESPONSE=$(curl -s -X PUT \
            "https://api.cloudflare.com/client/v4/accounts/$ACCOUNT_ID/cfd_tunnel/$TUNNEL_ID/configurations" \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            -H "Content-Type: application/json" \
            --data "{\"config\": $(cat new_config.json)}")
          
          echo "Update response:"
          echo "$UPDATE_RESPONSE" | jq '.'
          
          UPDATE_SUCCESS=$(echo "$UPDATE_RESPONSE" | jq -r '.success')
          if [ "$UPDATE_SUCCESS" != "true" ]; then
            echo "‚ùå Failed to update tunnel configuration"
            echo "$UPDATE_RESPONSE" | jq '.errors[]'
            exit 1
          fi
          
          echo "‚úÖ Tunnel configuration updated for $FQDN"
          
          # Cleanup
          rm -f current_config.json new_config.json
      
      - name: Create/Update DNS Record
        run: |
          SUBDOMAIN="${{ steps.domain.outputs.subdomain }}"
          FQDN="${{ steps.domain.outputs.fqdn }}"
          TUNNEL_CNAME="$TUNNEL_ID.cfargotunnel.com"
          
          echo "Managing DNS record: $FQDN ‚Üí $TUNNEL_CNAME"
          
          # Check for existing DNS record
          EXISTING_RECORD=$(curl -s -X GET \
            "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records?name=$FQDN" \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN")
          
          RECORD_ID=$(echo "$EXISTING_RECORD" | jq -r '.result[0].id // empty')
          
          RECORD_DATA=$(jq -n \
            --arg type "CNAME" \
            --arg name "$SUBDOMAIN" \
            --arg content "$TUNNEL_CNAME" \
            --argjson ttl 1 \
            --argjson proxied true \
            '{type: $type, name: $name, content: $content, ttl: $ttl, proxied: $proxied}')
          
          if [ -n "$RECORD_ID" ] && [ "$RECORD_ID" != "null" ]; then
            echo "Updating existing DNS record (ID: $RECORD_ID)..."
            DNS_RESPONSE=$(curl -s -X PUT \
              "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records/$RECORD_ID" \
              -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
              -H "Content-Type: application/json" \
              --data "$RECORD_DATA")
          else
            echo "Creating new DNS record..."
            DNS_RESPONSE=$(curl -s -X POST \
              "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records" \
              -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
              -H "Content-Type: application/json" \
              --data "$RECORD_DATA")
          fi
          
          echo "DNS response:"
          echo "$DNS_RESPONSE" | jq '.'
          
          DNS_SUCCESS=$(echo "$DNS_RESPONSE" | jq -r '.success')
          if [ "$DNS_SUCCESS" != "true" ]; then
            echo "‚ùå Failed to manage DNS record"
            echo "$DNS_RESPONSE" | jq '.errors[]'
            exit 1
          fi
          
          echo "‚úÖ DNS record configured for $FQDN"
      
      - name: Summary
        run: |
          echo "üöÄ Deployment completed successfully!"
          echo ""
          echo "Configuration:"
          echo "- Project: ${{ steps.domain.outputs.project }}"
          echo "- Domain: ${{ steps.domain.outputs.fqdn }}"
          echo "- Target: http://$DOCKER_HOST:$APP_PORT"
          echo ""
          echo "Your app should be available at: https://${{ steps.domain.outputs.fqdn }}"
          echo ""
          echo "Note: DNS propagation may take a few minutes."